{"name":"Redness","body":"# Redness\r\n\r\nSimple data structures for Redis-backed Ruby applications\r\n\r\n### Description\r\n\r\nRedness extends the redis-rb client library with useful data structures. It provides higher-level access\r\nto Redis than the client library while remaining more composable and minimal than a full-featured ORM.\r\n\r\n### Installation\r\n``\r\n  gem install redness\r\n``\r\n\r\n### Playing Around  (read the tests for more examples)\r\n```ruby\r\n  require 'redness'\r\n\r\n  $redis = Redis.new\r\n\r\n  # RedJSON represents a collection of data as JSON\r\n  RedJSON.set(\"foo\", {:foo => [\"bar\", \"baz\", \"buzz\"]})\r\n  #=> \"OK\"\r\n  RedJSON.get(\"foo\")\r\n  #=> {\"foo\"=>[\"bar\", \"baz\", \"buzz\"]}\r\n\r\n  # RedList represents a standard list of data\r\n  RedList.get(\"users:1:viewers\")\r\n  #=> [1]\r\n  RedList.add(\"users:1:viewers\", 2)\r\n  #=> 2\r\n  RedList.get(\"users:1:viewers\")\r\n  #=> [2, 1]\r\n  RedList.add(\"users:1:viewers\", 2)\r\n  #=> 2\r\n  RedList.get(\"users:1:viewers\")\r\n  #=> [2, 2, 1]\r\n\r\n  # RedCappedList is a list of data capped at a max length\r\n  capped_list = RedCappedList.new(\"somekey\", 2)\r\n  capped_list.get\r\n  #=> []\r\n  capped_list.add(1)\r\n  #=> \"OK\"\r\n  capped_list.get\r\n  #=> [1]\r\n  capped_list.add(2)\r\n  #=> \"OK\"\r\n  capped_list.get\r\n  #=> [2, 1]\r\n  capped_list.add(3)\r\n  #=> \"OK\"\r\n  capped_list.get\r\n  #=> [3, 2]\r\n\r\n  # RedSet represents a unique set of data\r\n  RedSet.add(\"myset\", 1)\r\n  #=> [1]\r\n  RedSet.add(\"myset\", 1)\r\n  #=> nil\r\n  RedSet.get(\"myset\")\r\n  #=> [1]\r\n  RedSet.add(\"myset\", 2)\r\n  RedSet.get(\"myset\")\r\n  #=> [2, 1]\r\n  RedSet.remove(\"myset\", 2)\r\n  #=> true\r\n  RedSet.get(\"myset\")\r\n  #=> [1]\r\n  # You can specify upper and lower bounds...\r\n  RedSet.get(\"myset\").each { |i| RedSet.remove(\"myset\", i) }\r\n  RedSet.get(\"myset\")\r\n  #=> []\r\n  1.upto(10).each { |i| RedSet.add(\"myset\", i) }\r\n  RedSet.get(\"myset\")\r\n  #=> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r\n  RedSet.get(\"myset\", lower: 2, upper: 7)\r\n  #=> [8, 7, 6, 5, 4, 3]\r\n  RedSet.count(\"myset\")\r\n  #=> 10\r\n\r\n  # RedHash represents a data collection as a Ruby hash\r\n  red_hash = RedHash.new(\"test\")\r\n  red_hash[:mykey]\r\n  #=> nil\r\n  red_hash[:mykey] = \"value\"\r\n  red_hash[:mykey]\r\n  #=> \"value\"\r\n  red_hash.all\r\n  #=> {\"mykey\"=>\"value\"}\r\n  red_hash.remove(:mykey)\r\n  red_hash.all\r\n  #=> {}\r\n\r\n  # RedSetMulti stores a collection of RedSets\r\n  RedSet.add(\"razzle\", 1)\r\n  RedSet.add(\"razzle\", 2)\r\n\r\n  RedSet.add(\"dazzle\", 1)\r\n  RedSet.add(\"dazzle\", 2)\r\n  RedSet.add(\"dazzle\", 3)\r\n\r\n  multi_set = RedSetMulti.new(RedSet.get(\"razzle\"), RedSet.get(\"dazzle\"))\r\n  multi_set.get\r\n  #=> [[2, 1], [3, 2, 1]]\r\n\r\n  # RedSetUnion represents the union of two or more RedSets\r\n  RedSet.add(\"key1\", 1)\r\n  RedSet.add(\"key1\", 2)\r\n  RedSet.add(\"key1\", 3)\r\n\r\n  RedSet.add(\"key2\", 1)\r\n  RedSet.add(\"key2\", 6)\r\n  RedSet.add(\"key2\", 7)\r\n\r\n  RedSet.add(\"key3\", 9)\r\n\r\n  union = RedSetUnion.new(\"key1\", \"key2\", \"key3\")\r\n  union.get\r\n  #=> [7,3,6,2,9,1]\r\n\r\n  # TimedRedSet is a RedSet with timestamped data\r\n  TimedRedSet.add(\"somekey\", 1)\r\n  TimedRedSet.add(\"somekey\", 2)\r\n\r\n  TimedRedSet.get(\"somekey\")\r\n  #=> [2, 1]\r\n\r\n  TimedRedSet.get_with_timestamps(\"somekey\")\r\n  #=> [[2, 2012-05-04 14:29:57 -0400], [1, 2012-05-04 14:29:48 -0400]]\r\n  \r\n  TimedRedSet.since(\"somekey\", 5.minutes.ago, lower: 1, upper: 2)\r\n  #=> [1]\r\n\r\n  # RedExpire expires the collection with the\r\n  # provided key in a given number of seconds\r\n  RedList.new(\"somelist\")\r\n  RedList.add(\"somelist\", 0)\r\n  # => 1\r\n  RedList.get(\"somelist\")\r\n  #=> [1]\r\n  # Expire the 'somelist' RedList in 1 second\r\n  RedExpire.set(\"somelist\", 1.second)\r\n  #=> true\r\n  RedList.get(\"somelist\")\r\n  #=> []\r\n```\r\n\r\n### TODO\r\n\r\n* Ensure all CRUD methods exist for all classes\r\n* Unify interfaces and method names across all classes (and remove the singleton pattern wherever it is found)\r\n\r\n### Copyright\r\n\r\nCopyright (c) 2012 HowAboutWe. See LICENSE.txt for further details.","tagline":"Simple data structures for Redis-backed Ruby applications","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}